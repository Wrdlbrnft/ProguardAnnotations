{
  "name": "ProguardAnnotations",
  "tagline": " Makes dealing with Proguard simple and easy!",
  "body": "* **Short and concise, but powerful API**: Define your rules with a few simple annotations and ProguardAnnotations takes care of the rest!\r\n* **Simplifies development**: You can move classes and refactor your code without worrying about breaking any proguard rules!\r\n* **Works with your current setup**: Don't want to migrate your whole project to try out ProguardAnnotations? You don't have to! While using ProguardAnnotations you can still define rules manually or use another Proguard library. No conflicts, no problems.\r\n\r\n## How do I add it to my project?\r\n\r\nTo use Proguard Annotations add the following at the very top of your build.gradle file:\r\n\r\n```groovy\r\nplugins {\r\n    id \"com.github.wrdlbrnft.proguard-annotations\" version \"0.2.0.41\"\r\n}\r\n```\r\n\r\nAnd you are done! Now you can use ProguardAnnotations.\r\n\r\n## How do I use it?\r\n\r\nProguardAnnotations currently provides five different annotations with which you can define your Proguard rules:\r\n\r\n* `@KeepClass`: Annotate a class, interface or enum with this annotation to keep it and its members. You can also modify what exactly is kept from the class by specifying the `KeepSetting` on the annotation (explained below).\r\n* `@KeepMethod`: Annotate a method with this annotation to keep it. Only keeps the method, not the class, interface or enum which contains it.\r\n* `@KeepField`: Annotate a field with this annotation to keep it. Only keeps the method, not the class, interface or enum which contains it.\r\n* `@KeepName`: Annotate a class, interface or enum with this annotation to just keep the name, and not any members. You can still use `@KeepField` or `@KeepMethod` to selectively keep members from the class.\r\n* `@DontKeep`: Annotate a method or field with this annotation to specifically not keep it.\r\n\r\n## Examples\r\n\r\nIn most cases the `@KeepClass` annotation is all you need! By default it will keep the annotated class and all of its members. For example:\r\n\r\n```java\r\n@KeepClass\r\npublic interface ExampleInterface {\r\n    void foo();\r\n    void bar();\r\n}\r\n```\r\n\r\nIf you want don't want to keep a specific method you can use `@DontKeep`:\r\n\r\n```java\r\n@KeepClass\r\npublic interface ExampleInterface {\r\n    void foo();\r\n    \r\n    @DontKeep\r\n    void bar();\r\n}\r\n```\r\n\r\nYou can use the `KeepSetting` enum to set what exactly is kept from a class annotated with `@KeepClass`. A few examples:\r\n\r\nKeep only public members and the name of the class:\r\n```java\r\n@KeepClass(KeepSetting.PUBLIC_MEMBERS)\r\npublic class ExampleClass {\r\n    \r\n    // This is kept\r\n    public static int SOME_ID = 0x01;\r\n    \r\n    // This is kept as well\r\n    public void doIt() {\r\n        ...\r\n    }\r\n    \r\n    // This is not kept\r\n    private String mSomeValue;\r\n    \r\n    // This is also not kept\r\n    String void doSomethingElse() {\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\nKeep package local methods and public fields as well as the name of the class.\r\n```java\r\n@KeepClass({KeepSetting.PACKAGE_LOCAL_METHODS, KeepSetting.PUBLIC_FIELDS)\r\npublic class ExampleClass {\r\n    \r\n    // This is kept\r\n    public static int SOME_ID = 0x01;\r\n    \r\n    // This is not kept\r\n    public void doIt() {\r\n        ...\r\n    }\r\n    \r\n    // This is not kept\r\n    private String mSomeValue;\r\n    \r\n    // This is kept\r\n    String void doSomethingElse() {\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\nYou can keep specific methods or fields with the `@KeepMethod` and `@KeepField` annotations:\r\n\r\n```java\r\n@KeepField\r\npublic static int SOME_ID = 0x01;\r\n    \r\n@KeepMethod\r\npublic void doIt() {\r\n    ...\r\n}\r\n```\r\n\r\nBut this does not automatically keep the containing class as well! If you want to keep the name of the containing class too you can use the `@KeepName` annotation:\r\n\r\n```java\r\n@KeepName\r\npublic class ExampleClass {\r\n    \r\n    @KeepField\r\n    public static int SOME_ID = 0x01;\r\n    \r\n    @KeepMethod\r\n    public void doIt() {\r\n        ...\r\n    }\r\n    \r\n    // This is not kept\r\n    private String mSomeValue;\r\n    \r\n    // This is also not kept\r\n    String void doSomethingElse() {\r\n        ...\r\n    }\r\n}\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}