{
  "name": "ProguardAnnotations",
  "tagline": " Makes dealing with Proguard simple and easy!",
  "body": "* **Short and concise, but powerful API**: Define your rules with a few simple annotations and ProguardAnnotations takes care of the rest!\r\n* **Simplifies development**: You can move classes and refactor your code without worrying about breaking any proguard rules!\r\n* **Works with your current setup**: Don't want to migrate your whole project to try out ProguardAnnotations? You don't have to! While using ProguardAnnotations you can still define rules manually or use another Proguard library. No conflicts, no problems.\r\n\r\n## How do I add it to my project?\r\n\r\nTo use Proguard Annotations add the following at the very top of your build.gradle file:\r\n\r\n```groovy\r\nplugins {\r\n    id \"com.github.wrdlbrnft.proguard-annotations\" version \"0.2.0.51\"\r\n}\r\n```\r\n\r\nAnd you are done! Now you can use ProguardAnnotations.\r\n\r\n## How do I use it?\r\n\r\nProguardAnnotations currently provides four different annotations with which you can define your Proguard rules:\r\n\r\n* `@KeepClass`: Annotate a class, interface or enum with this annotation to keep it.\r\n* `@KeepMember`: Annotate a method or field with this annotation to keep it. Only keeps the annotated member, not the class, interface or enum which contains it.\r\n* `@KeepClassMembers`: Annotate a class, interface or enum with this annotation to keep its members. You can also modify what exactly is kept from the class by specifying the `KeepSetting` on the annotation (explained below).\r\n* `@DontKeep`: Annotate a method or field with this annotation to specifically not keep it.\r\n\r\n## Examples\r\n\r\nIn most cases the `@KeepClass` and `@KeepMember` annotations are all you need! For example:\r\n\r\n```java\r\n@KeepClass\r\npublic class ExampleClass {\r\n    \r\n    // This field is kept\r\n    @KeepMember\r\n    public static int SOME_ID = 0x01;\r\n    \r\n    // This method is kept too\r\n    @KeepMember\r\n    public void doIt() {\r\n        ...\r\n    }\r\n    \r\n    // This field is not kept\r\n    private String mSomeValue;\r\n    \r\n    // This method is not kept as well\r\n    String void doSomethingElse() {\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\nYou can use `@KeepClassMembers` together with `@KeepClass` to keep all the members of a class:\r\n\r\n```java\r\n@KeepClass\r\n@KeepClassMembers\r\npublic interface ExampleInterface {\r\n    void foo();\r\n    void bar();\r\n}\r\n```\r\n\r\nIf you want don't want to keep a specific method you can use `@DontKeep`:\r\n\r\n```java\r\n@KeepClass\r\n@KeepClassMembers\r\npublic interface ExampleInterface {\r\n    \r\n    // This method is kept\r\n    void foo();\r\n    \r\n    // This method is not kept\r\n    @DontKeep\r\n    void bar();\r\n}\r\n```\r\n\r\nWith `KeepSetting` you specify what exactly is kept by `@KeepClassMembers`:\r\n\r\n```java\r\n@KeepClass\r\n@KeepClassMembers(KeepSetting.PUBLIC_MEMBERS)\r\npublic class ExampleClass {\r\n    \r\n    // This is kept\r\n    public static final int SOME_ID = 0x01;\r\n    \r\n    // This is kept as well\r\n    public void doIt() {\r\n        ...\r\n    }\r\n    \r\n    // This is not kept\r\n    private String mSomeValue;\r\n    \r\n    // This too is not kept\r\n    String void doSomethingElse() {\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\nOf course you can specify multiple `KeepSetting` values:\r\n\r\n```java\r\n@KeepClass\r\n@KeepClassMembers({KeepSetting.PUBLIC_MEMBERS, KeepSetting.PACKAGE_LOCAL_METHODS})\r\npublic class ExampleClass {\r\n    \r\n    // This field is kept\r\n    public static final int SOME_ID = 0x01;\r\n    \r\n    // This method is kept as well\r\n    public void doIt() {\r\n        ...\r\n    }\r\n    \r\n    // This field is not kept\r\n    private String mSomeValue;\r\n    \r\n    // But this method is kept too\r\n    String void doSomethingElse() {\r\n        ...\r\n    }\r\n}\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}